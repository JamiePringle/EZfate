install.packages("htmlwidgets")
load(htmlwidgets)
load(htmlwidget)
load(htmlwidgets)
install.packages("htmlwidgets")
source('getConnectivityData.R')
dataDir<-'theTestData'
regionName<-'theAmericas'
depth<-1
year<-'climatology'
verticalBehavior<-'fixed'
month<-5
minPLD<-18; maxPLD<-minPLD
E1<-getConnectivityData(dataDir,regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
month<-6
E2<-getConnectivityData(dataDir,regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
source('connectivityUtilities.R')
source('getConnectivityData.R')
dataDir<-'theTestData'
regionName<-'theAmericas'
depth<-1
year<-'climatology'
verticalBehavior<-'fixed'
month<-5
minPLD<-18; maxPLD<-minPLD
E1<-getConnectivityData(dataDir,regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
month<-6
E2<-getConnectivityData(dataDir,regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
source('connectivityUtilities.R')
setwd("~/GitHub/EZfate/docs")
knitr::opts_chunk$set(echo = TRUE)
E<-readRDS('mayJuneEastCoast_connectivity.RDS')
library(sf)
library(ggplot2)
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf") #get coastline data
class(world)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-82, -70), ylim = c(24, 36), expand = FALSE)+
geom_point(data = E, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "green",color='black')
print(p) #this makes the figure appear
#define limits of a box that defines the release locations
lonLimits=c(-82.0,-80) #longitude of corners
latLimits=c(28.0,30.0) #latitude of corners
limitPoly=st_polygon(list(cbind(lonLimits[c(1,2,2,1,1)],latLimits[c(1,1,2,2,1)])))
limitPoly<-st_sfc(limitPoly,crs=4326) #make into a surface, 4326 is WGS84
#subset connectivity data
dataDir<-'theTestData'
source('connectivityUtilities.R')
EstartPoints<-subsetConnectivity_byPolygon(E,limitPoly,trimTo=FALSE)
allTo<-data.frame(lonTo=c(EstartPoints$lonTo,recursive=TRUE),
latTo=c(EstartPoints$latTo,recursive=TRUE),
numTo=c(EstartPoints$numTo,recursive=TRUE))
whereAllWent<-allTo %>% group_by(lonTo,latTo) %>% summarise(numTo=sum(numTo))
whereAllWent$fracTo<-whereAllWent$numTo/sum(EstartPoints$numLaunched)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-82, -55), ylim = c(24, 42), expand = FALSE)
#p<-p+geom_point(data = EstartPoints, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "green",color='black')
p<-p+geom_point(data = whereAllWent, aes(x = lonTo, y = latTo, fill=log10(fracTo),colour=log10(fracTo)), size = 1, shape = 23)
p<-p+geom_point(data = EstartPoints, aes(x = lonFrom, y = latFrom), size = 0.5, shape = 23, fill = "green",color='green')
print(p) #this makes the figure appear
install.packages(c("gganimate", "gifski"))
E<-readRDS('mayJuneEastCoast_connectivity.RDS')
dataDir<-'theTestData'
source('connectivityUtilities.R')
#get the water depth on the starting points
theLons<-E$lonFrom
theLats<-E$latFrom
theDistsKm<-gridDistKm[cbind(E$nxFrom,E$nyFrom)]
theLonLat<-data.frame(theLons=theLons,theLats=theLats,theDistsKm=theDistsKm)
#and plot
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
p<-ggplot(data = world) +
geom_sf() +
coord_sf(xlim= c(-85, -60), ylim = c(23, 48), expand = FALSE)
p<-p+geom_point(data = theLonLat, aes(x = theLons, y = theLats, fill=theDistsKm,colour=theDistsKm), size = 1, shape = 23)
print(p)
Enearshore<-subsetConnectivity_byGridValue(E,gridDepth,0.0,25.0,trimTo=TRUE)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -60), ylim = c(23, 48), expand = FALSE)+
geom_point(data = Enearshore, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "green",color='green')
print(p) #this makes the figure appear
critters<-data.frame(nx=2478,ny=1806,num=1.0)
critters<-addLatLon2orgDist(critters)
print(critters)
R=1.0
connectDict<-makeConnectionDict(Enearshore)
nextGenCritters<-propagateOneGeneration(Enearshore,connectDict,critters,R)
print(paste('The initial total population was',sum(critters$num),'and after one generation there are',sum(nextGenCritters$num)))
critters<-addLatLon2orgDist(critters)
nextGenCritters<-addLatLon2orgDist(nextGenCritters)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -65), ylim = c(23, 35), expand = FALSE)+
geom_point(data = Enearshore, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "seagreen",color='seagreen',alpha=0.2)+
geom_point(data = nextGenCritters, aes(x = lon, y = lat), size = 1, shape = 23, fill = "green",color='green')+
geom_point(data = critters, aes(x = lon, y = lat), size = 1, shape = 23, fill = "red",color='red')+
ggtitle('the starting location is the red dot,\nthe bright green is the distribution after 1 generation,\nand the dark green is the habitat')
print(p) #this makes the figure appear
numGen<-10 #the number of generations to run
R<-1.0 #define R
critters<-data.frame(nx=2478,ny=1806,num=1.0) #make initial critter distribution
critters<-addLatLon2orgDist(critters)
allGenerations<-data.frame(lon=critters$lon,lat=critters$lat,num=critters$num,generation=0) #put initial condition into allGenerations
initCritters <- critters #save initial condition for latter plotting
for (thisGen in 1:numGen) {
critters<-propagateOneGeneration(Enearshore,connectDict,critters,R) #advance critters one generation
critters<-addLatLon2orgDist(critters) #add lat lon
critters$generation<-thisGen #add generation column to critters
allGenerations<-rbind(allGenerations,critters[c('lon','lat','num','generation')])
#print(thisGen)
}
library(gganimate) #to make this work, you might also have to install the gifski library
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -65), ylim = c(23, 48), expand = FALSE)+
geom_point(data = allGenerations, aes(x = lon, y = lat,fill=log10(num),colour=log10(num)),
size = 1, shape = 23)+
transition_manual(generation)
#ggtitle('the starting location is the red dot,\nthe bright green is the distribution after 1 generation,\nand the dark green is the habitat')
#print(p) #this makes the figure appear in interactive sessions
anim_save('rangeExpand.gif',p)
totalPop<- allGenerations %>% group_by(generation) %>% summarize(totalPopulation=sum(num))
totalPop$log10totalPopulation<-log10(totalPop$totalPopulation)
p<-ggplot(data=totalPop,aes(x=generation,y=log10totalPopulation))+geom_line()+geom_point()
print(p)
