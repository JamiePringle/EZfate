source("~/workfiles/oceanparcels/codeToDistribute/Rtest/canReadZarr.R")
!which ncdump
source("~/workfiles/oceanparcels/codeToDistribute/Rtest/canReadZarr.R")
source("~/workfiles/oceanparcels/codeToDistribute/Rtest/canReadZarr.R")
#mode=nczarr,zarr
source("~/workfiles/oceanparcels/codeToDistribute/Rtest/canReadZarr.R")
sounds <- c(
"cat"="meow",
"dog"="woof",
"horse"="neigh"
)
sounds
jnk <-c( c(1,2)=3)
jnk <-c('narf'=3)
jnk
jnk <-c(5=3)
x<-5
jnk <-c(x=3)
jnk
x
install.packages("dict")
install.packages("Dict")
jnk=Dict()
jnk=dict()
librar(Dict)
library(Dict)
jnk=Dict()
jnk=dict()
jnk<-Dict$new()
jnk<-Dict$new(Charlie=40L)
jnk
jnk<-Dict$new(c(10,2)=40L)
jnk<-Dict$new(Charlie=40L)
jnk['a']<-c(1,2)
jnk
jnk['a']
jnk[1]<-'fart'
jnk[`1`]<-'fart'
debugSource("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
j1<-apply(E,1,nxny2lon)
View(j1)
nrow(j1)
ncol(j1)
source("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
library(tidyverse)
j1<-map(E,jnk)
j1<-pmap(E,jnk)
j1<-pmap_df(E,jnk)
pmap(E)
j1<-apply(E,1,jnk)
j1
View(j1)
View(j1)
nxToList<-map(E,1,function(a) {return(a$nxTo)})
nxToList<-apply(E,1,function(a) {return(a$nxTo)})
nxToList<-apply(E,1,function(a) {return(a$nxTo)})
nyToList<-apply(E,1,function(a) {return(a$nyTo)})
latTo<-map2(nxToList,nyToList,nxny2lat)
View(latTo)
View(latTo)
View(nxToList)
View(latTo)
latTo<-map2_dfr(nxToList,nyToList,nxny2lat)
latTo<-map2_df(nxToList,nyToList,nxny2lat)
latTo<-map2(nxToList,nyToList,nxny2lat(.x,.y))
latTo<-map2(.x=nxToList,.y=nyToList,.f=~nxny2lat(.x,.y))
View(lat)
View(latTo)
lonTo<-map2(.x=nxToList,.y=nyToList,.f=~nxny2lon(.x,.y))
View(lonTo)
lonTo<-mapply(nxny2lat,nxToList,nyToList)
View(lonTo)
lonTo<-mapply(nxny2lat,nxToList,nyToList,SIMPLIFY = FALSE)
View(lonTo)
nx=c(1,2,3,4,5)
ny=c(1,2,3,4,5)
lonTo<-mapply(nxny2lat,nx,ny,SIMPLIFY = FALSE)
View(lonTo)
lonTo<-nxny2lat(nx,ny)
source("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
returnVals<-nxny2lonlat(E$nxFrom,E$nyFrom)
source("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
View(Eplus)
source("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
nxToList<-apply(E,1,function(a) {return(a$nxTo)})
nyToList<-apply(E,1,function(a) {return(a$nyTo)})
View(nxToList)
source("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
jnk<-map2(nxToList,nyToList,nxny2lon)
View(jnk)
View(Eplus)
View(Eplus)
source("~/workfiles/oceanparcels/conMatrixFormatExperiments/RplotTools/nxny2lonlat.R")
View(Eplus)
View(Eplus)
source('getConnectivityData.R')
dataDir<-'theTestData'
regionName<-'theAmericas'
depth<-1
year<-'climatology'
verticalBehavior<-'fixed'
month<-5
minPLD<-18; maxPLD<-minPLD
E1<-getConnectivityData(dataDir,regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
month<-6
E2<-getConnectivityData(dataDir,regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
source('connectivityUtilities.R')
E1<-addLatLon(E1)
E2<-addLatLon(E2)
E<-readRDS('mayJuneEastCoast_connectivity.RDS')
source('connectivityUtilities.R')
#get the water depth on the starting points
theLons<-E$lonFrom
theLats<-E$latFrom
theDistsKm<-gridDistKm[cbind(E$nxFrom,E$nyFrom)]
theLonLat<-data.frame(theLons=theLons,theLats=theLats,theDistsKm=theDistsKm)
#and plot
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
p<-ggplot(data = world) +
geom_sf() +
coord_sf(xlim= c(-85, -60), ylim = c(23, 48), expand = FALSE)
p<-p+geom_point(data = theLonLat, aes(x = theLons, y = theLats, fill=theDistsKm,colour=theDistsKm), size = 1, shape = 23)
print(p)
Enearshore<-subsetConnectivity_byGridValue(E,gridDepth,0.0,25.0,trimTo=TRUE)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -60), ylim = c(23, 48), expand = FALSE)+
geom_point(data = Enearshore, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "green",color='green')
print(p) #this makes the figure appear
critters<-data.frame(nx=2478,ny=1806,num=1.0)
critters<-addLatLon2orgDist(critters)
print(critters)
R=1.0
connectDict<-makeConnectionDict(Enearshore)
nextGenCritters<-propagateOneGeneration(Enearshore,connectDict,critters,R)
print(paste('The initial total population was',sum(critters$num),'and after one generation there are',sum(nextGenCritters$num)))
critters<-addLatLon2orgDist(critters)
nextGenCritters<-addLatLon2orgDist(nextGenCritters)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -65), ylim = c(23, 35), expand = FALSE)+
geom_point(data = Enearshore, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "seagreen",color='seagreen',alpha=0.2)+
geom_point(data = nextGenCritters, aes(x = lon, y = lat), size = 1, shape = 23, fill = "green",color='green')+
geom_point(data = critters, aes(x = lon, y = lat), size = 1, shape = 23, fill = "red",color='red')+
ggtitle('the starting location is the red dot,\nthe bright green is the distribution after 1 generation,\nand the dark green is the habitat')
print(p) #this makes the figure appear
numGen<-10 #the number of generations to run
R<-1.0 #define R
critters<-data.frame(nx=2478,ny=1806,num=1.0) #make initial critter distribution
critters<-addLatLon2orgDist(critters)
allGenerations<-data.frame(lon=critters$lon,lat=critters$lat,num=critters$num,generation=0) #put initial condition into allGenerations
initCritters <- critters #save initial condition for latter plotting
for (thisGen in 1:numGen) {
critters<-propagateOneGeneration(Enearshore,connectDict,critters,R) #advance critters one generation
critters<-addLatLon2orgDist(critters) #add lat lon
critters$generation<-thisGen #add generation column to critters
allGenerations<-rbind(allGenerations,critters[c('lon','lat','num','generation')])
#print(thisGen)
}
library(gganimate) #to make this work, you might also have to install the gifski library
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -65), ylim = c(23, 48), expand = FALSE)+
geom_point(data = allGenerations, aes(x = lon, y = lat,fill=num,colour=num),
size = 1, shape = 23)+
transition_manual(generation)
#ggtitle('the starting location is the red dot,\nthe bright green is the distribution after 1 generation,\nand the dark green is the habitat')
#print(p) #this makes the figure appear in interactive sessions
anim_save('rangeExpand.gif',p)
totalPop<- allGenerations %>% group_by(generation) %>% summarize(totalPopulation=sum(num))
totalPop$log10totalPopulation<-log10(totalPop$totalPopulation)
p<-ggplot(data=totalPop,aes(x=generation,y=log10totalPopulation))+geom_line()+geom_point()
print(p)
numGen<-20 #the number of generations to run
R<-1.0 #define R
critters<-data.frame(nx=2478,ny=1806,num=1.0) #make initial critter distribution
critters<-addLatLon2orgDist(critters)
allGenerations<-data.frame(lon=critters$lon,lat=critters$lat,num=critters$num,generation=0) #put initial condition into allGenerations
initCritters <- critters #save initial condition for latter plotting
for (thisGen in 1:numGen) {
critters<-propagateOneGeneration(Enearshore,connectDict,critters,R) #advance critters one generation
critters<-addLatLon2orgDist(critters) #add lat lon
critters$generation<-thisGen #add generation column to critters
allGenerations<-rbind(allGenerations,critters[c('lon','lat','num','generation')])
#print(thisGen)
}
library(gganimate) #to make this work, you might also have to install the gifski library
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-85, -65), ylim = c(23, 48), expand = FALSE)+
geom_point(data = allGenerations, aes(x = lon, y = lat,fill=log10(num),colour=log10(num)),
size = 1, shape = 23)+
transition_manual(generation)
#ggtitle('the starting location is the red dot,\nthe bright green is the distribution after 1 generation,\nand the dark green is the habitat')
#print(p) #this makes the figure appear in interactive sessions
anim_save('rangeExpand.gif',p)
setwd("~/Documents/GitHub/EZfate/code")
source("~/Documents/GitHub/EZfate/code/connectivityUtilities.R")
source("~/Documents/GitHub/EZfate/code/connectivityUtilities.R")
source('getConnectivityUtilities.R')
source('connectivityUtilities.R')
regionName<-'theAmericas'
depth<-1
year<-'climatology'
verticalBehavior<-'fixed'
month<-5
minPLD<-18; maxPLD<-minPLD
E1<-getConnectivityData(regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
month<-6
E2<-getConnectivityData(regionName,depth,year,verticalBehavior,month,minPLD,maxPLD)
E1<-addLatLon(E1)
E2<-addLatLon(E2)
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf") #get coastline data
class(world)
#plot(limitPoly)
p<-ggplot(data = world) + geom_sf() +
coord_sf(xlim= c(-170, -22), ylim = c(-70, 80), expand = FALSE)+
geom_point(data = E1, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "green",color='green')
print(p) #this makes the figure appear
latPoly<-c(25.0,38.2,46.47,45.21,44.21,27.95,25.12,25.0)
lonPoly<-c(-80.5,-85.5,-65.42,-62.57,-65.47,-73.86,-79.53,-80.5)
limitPoly=st_polygon(list(cbind(lonPoly,latPoly)))
limitPoly<-st_sfc(limitPoly,crs=4326) #make into a surface, 4326 is the code for the WGS84 datum in proj
E1<-subsetConnectivity_byPolygon(E1,limitPoly,trimTo=FALSE)
E2<-subsetConnectivity_byPolygon(E2,limitPoly,trimTo=FALSE)
p<-ggplot(data = world) + geom_sf() + geom_sf(data=limitPoly,fill=NA,color='red') + #add limit polygon
coord_sf(xlim= c(-85, -60), ylim = c(23, 48), expand = FALSE)+
geom_point(data = E1, aes(x = lonFrom, y = latFrom), size = 1, shape = 23, fill = "green",color='black')
print(p) #this makes the figure appear
E<-combineConnectivityData(E1,E2)
saveRDS(E,file='mayJuneEastCoast_connectivity.RDS')
